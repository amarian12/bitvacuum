#!/usr/bin/env ruby
require 'gli'
require 'yaml'
require 'bitcoin'
require_relative 'configuration'

include GLI::App

program_desc 'BitVacuum is an application that is intended to clean dust (small transactions) out of the XCOIN wallets'

subcommand_option_handling :normal
arguments :strict

desc 'Scans for unspent transactions in selected wallet(s) below the threshold'
arg_name '| Example of usage: bitvacuum scan -c BitCoin -t 0.0001'
command :scan do |c|
  c.desc 'Verbose. #Currently not implemented'
  c.switch [:v,:verbose]

  c.desc 'Specify currency (Bitcoin, Litecoin, Dogecoin, Darkcoin etc)'
  c.default_value 'all'
  c.arg_name '[CURRENCY NAME]'
  c.flag [:c,:currency]

  c.desc 'Maximum transaction amount'
  c.default_value YAML::load_file(File.join(__dir__, '../config/application.yml'))['input_value_threshold'] # TODO: To investigate why configuration method cannot be invoked here
  c.arg_name '[VALUE]'
  c.flag [:t,:threshold]

  c.action do |global_options,options,args|
    if options[:threshold]
      threshold = options[:threshold].to_f
    else
      threshold = config['input_value_threshold']
    end

    puts "Running scan with options: #{options}"
    puts '====='

    @operational_currencies.each do |currency|
      puts "Scanning for unspent transactions for currency: #{currency[:name]}"
      establish_connection(currency)
      unspent =  scan_for_unspent_transactions(threshold)
      # TODO: To store results in database
      puts "Found #{unspent.count} unspent transactions."
      puts unspent
      puts 'Scan successful!'
    end

  end
end

desc 'Describe run here'
arg_name 'Describe arguments to run here'
command :run do |c|
  c.action do |global_options,options,args|
    puts "run command ran"
  end
end

pre do |global,command,options,args|
  @currencies = configuration.param['currencies']
  currency = options[:currency].downcase

  unless @currencies.include? currency or currency == 'all'
    raise "Unknown currency #{currency}"
  end

  load_currency_configuration currency
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  puts "Error occured: #{exception.message}"
end

def scan_for_unspent_transactions(threshold)
  @connection.listunspent.select { |t| t['amount'] <= threshold }
end

def configuration
  Configuration.instance
end

def load_currency_configuration(currency_name)
  @operational_currencies = []
  wallets = configuration.wallets
  if currency_name == 'all'
    @currencies.each do |currency|
      @operational_currencies.push({ name: currency, config: wallets[currency] })
    end
  else
    @operational_currencies.push({ name: currency_name, config: wallets[currency_name] })
  end
end

def establish_connection(currency)
  @connection = Bitcoin::Client.new(currency[:config]['rpc_username'], currency[:config]['rpc_password'],
                                    :host => currency[:config]['rpc_host'], :port =>currency[:config]['rpc_port'])
end

exit run(ARGV)
